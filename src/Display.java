import java.awt.event.*;
import java.text.*;
import java.util.*;

public class Display extends javax.swing.JFrame{ //implements KeyListener{

    static int oldBase=10;
    static boolean inv=false;
    static double result=0;
    static boolean oper = true;
    static int base=10;
    static boolean frac = false;
    static double memory=0;
    static boolean clear=false;
    static DecimalFormat df = new DecimalFormat("#.#####################");
    static DecimalFormat sn = new DecimalFormat("0.####################E0");

    /** Creates new form Display */
    public Display() {
        //addKeyListener(this);
        initComponents();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        inputField = new javax.swing.JTextField();
        enter = new javax.swing.JButton();
        button1 = new javax.swing.JButton();
        button2 = new javax.swing.JButton();
        button3 = new javax.swing.JButton();
        button4 = new javax.swing.JButton();
        button5 = new javax.swing.JButton();
        button6 = new javax.swing.JButton();
        button7 = new javax.swing.JButton();
        button8 = new javax.swing.JButton();
        button9 = new javax.swing.JButton();
        button0 = new javax.swing.JButton();
        buttonSign = new javax.swing.JButton();
        buttonDecimal = new javax.swing.JButton();
        buttonDivide = new javax.swing.JButton();
        buttonMultiply = new javax.swing.JButton();
        buttonAdd = new javax.swing.JButton();
        buttonSubtract = new javax.swing.JButton();
        buttonMod = new javax.swing.JButton();
        buttonAnd = new javax.swing.JButton();
        buttonOr = new javax.swing.JButton();
        buttonXor = new javax.swing.JButton();
        buttonLBracket = new javax.swing.JButton();
        buttonRBracket = new javax.swing.JButton();
        buttonCE = new javax.swing.JButton();
        buttonClear = new javax.swing.JButton();
        buttonAC = new javax.swing.JButton();
        buttonBackspace = new javax.swing.JButton();
        buttonSquare = new javax.swing.JButton();
        buttonCube = new javax.swing.JButton();
        buttonExp = new javax.swing.JButton();
        buttonLog = new javax.swing.JButton();
        buttonLn = new javax.swing.JButton();
        button1x = new javax.swing.JButton();
        buttonFact = new javax.swing.JButton();
        buttonNot = new javax.swing.JButton();
        buttonMAdd = new javax.swing.JButton();
        buttonMR = new javax.swing.JButton();
        buttonMSubtract = new javax.swing.JButton();
        buttonMC = new javax.swing.JButton();
        buttonPi = new javax.swing.JButton();
        buttonTan = new javax.swing.JButton();
        buttonCos = new javax.swing.JButton();
        buttonSin = new javax.swing.JButton();
        buttonBin = new javax.swing.JRadioButton();
        buttonDec = new javax.swing.JRadioButton();
        buttonHex = new javax.swing.JRadioButton();
        checkInv = new javax.swing.JCheckBox();
        buttonPerm = new javax.swing.JButton();
        buttonComb = new javax.swing.JButton();
        buttonA = new javax.swing.JButton();
        buttonB = new javax.swing.JButton();
        buttonC = new javax.swing.JButton();
        buttonD = new javax.swing.JButton();
        buttonE = new javax.swing.JButton();
        buttonF = new javax.swing.JButton();
        buttonAns = new javax.swing.JButton();
        buttonOct = new javax.swing.JRadioButton();
        buttonExp10 = new javax.swing.JButton();
        buttonFrac = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculator");
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 590, 256));
        setMinimumSize(new java.awt.Dimension(590, 256));
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        inputField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        inputField.setText("0");
        inputField.setAutoscrolls(false);
        inputField.setFocusable(false);
        inputField.setHighlighter(null);
        inputField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFieldActionPerformed(evt);
            }
        });
        inputField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        enter.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        enter.setText("=");
        enter.setToolTipText("Equal");
        enter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterActionPerformed(evt);
            }
        });
        enter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        button1.setFont(new java.awt.Font("Tahoma", 0, 12));
        button1.setText("1");
        button1.setToolTipText("1");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });
        button1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        button2.setFont(new java.awt.Font("Tahoma", 0, 12));
        button2.setText("2");
        button2.setToolTipText("2");
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });
        button2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        button3.setFont(new java.awt.Font("Tahoma", 0, 12));
        button3.setText("3");
        button3.setToolTipText("3");
        button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button3ActionPerformed(evt);
            }
        });
        button3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        button4.setFont(new java.awt.Font("Tahoma", 0, 12));
        button4.setText("4");
        button4.setToolTipText("4");
        button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button4ActionPerformed(evt);
            }
        });
        button4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        button5.setFont(new java.awt.Font("Tahoma", 0, 12));
        button5.setText("5");
        button5.setToolTipText("5");
        button5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button5ActionPerformed(evt);
            }
        });
        button5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        button6.setFont(new java.awt.Font("Tahoma", 0, 12));
        button6.setText("6");
        button6.setToolTipText("6");
        button6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button6ActionPerformed(evt);
            }
        });
        button6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        button7.setFont(new java.awt.Font("Tahoma", 0, 12));
        button7.setText("7");
        button7.setToolTipText("7");
        button7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button7ActionPerformed(evt);
            }
        });
        button7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        button8.setFont(new java.awt.Font("Tahoma", 0, 12));
        button8.setText("8");
        button8.setToolTipText("8");
        button8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button8ActionPerformed(evt);
            }
        });
        button8.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        button9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        button9.setText("9");
        button9.setToolTipText("9");
        button9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button9ActionPerformed(evt);
            }
        });
        button9.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        button0.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        button0.setText("0");
        button0.setToolTipText("0");
        button0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button0ActionPerformed(evt);
            }
        });
        button0.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonSign.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        buttonSign.setText("+/-");
        buttonSign.setToolTipText("Negative");
        buttonSign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSignActionPerformed(evt);
            }
        });
        buttonSign.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonDecimal.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonDecimal.setText(".");
        buttonDecimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDecimalActionPerformed(evt);
            }
        });
        buttonDecimal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonDivide.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonDivide.setText("/");
        buttonDivide.setToolTipText("Divide");
        buttonDivide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDivideActionPerformed(evt);
            }
        });
        buttonDivide.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonMultiply.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonMultiply.setText("*");
        buttonMultiply.setToolTipText("Multiply");
        buttonMultiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMultiplyActionPerformed(evt);
            }
        });
        buttonMultiply.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonAdd.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        buttonAdd.setText("+");
        buttonAdd.setToolTipText("Add");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });
        buttonAdd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonSubtract.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonSubtract.setText("-");
        buttonSubtract.setToolTipText("Subtract");
        buttonSubtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSubtractActionPerformed(evt);
            }
        });
        buttonSubtract.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonMod.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonMod.setText("Mod");
        buttonMod.setToolTipText("Modula");
        buttonMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonModActionPerformed(evt);
            }
        });
        buttonMod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonAnd.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonAnd.setText("And");
        buttonAnd.setToolTipText("AND");
        buttonAnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAndActionPerformed(evt);
            }
        });
        buttonAnd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonOr.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonOr.setText("Or");
        buttonOr.setToolTipText("OR");
        buttonOr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOrActionPerformed(evt);
            }
        });
        buttonOr.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonXor.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonXor.setText("Xor");
        buttonXor.setToolTipText("XOR");
        buttonXor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonXorActionPerformed(evt);
            }
        });
        buttonXor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonLBracket.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonLBracket.setText("(");
        buttonLBracket.setToolTipText("Left Bracket");
        buttonLBracket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLBracketActionPerformed(evt);
            }
        });
        buttonLBracket.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonRBracket.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonRBracket.setText(")");
        buttonRBracket.setToolTipText("Right Bracket");
        buttonRBracket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRBracketActionPerformed(evt);
            }
        });
        buttonRBracket.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonCE.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonCE.setText("CE");
        buttonCE.setToolTipText("Clear Entry");
        buttonCE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCEActionPerformed(evt);
            }
        });
        buttonCE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonClear.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        buttonClear.setText("C");
        buttonClear.setToolTipText("Clear");
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });
        buttonClear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonAC.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonAC.setText("AC");
        buttonAC.setToolTipText("All Clear");
        buttonAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonACActionPerformed(evt);
            }
        });
        buttonAC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonBackspace.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonBackspace.setText("Backspace");
        buttonBackspace.setToolTipText("Backspace");
        buttonBackspace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBackspaceActionPerformed(evt);
            }
        });
        buttonBackspace.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonSquare.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonSquare.setText("^2");
        buttonSquare.setToolTipText("Square");
        buttonSquare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSquareActionPerformed(evt);
            }
        });
        buttonSquare.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonCube.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonCube.setText("^3");
        buttonCube.setToolTipText("Cube");
        buttonCube.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCubeActionPerformed(evt);
            }
        });
        buttonCube.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonExp.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonExp.setText("^y");
        buttonExp.setToolTipText("Exponent");
        buttonExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExpActionPerformed(evt);
            }
        });
        buttonExp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonLog.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonLog.setText("log");
        buttonLog.setToolTipText("Logarithim");
        buttonLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLogActionPerformed(evt);
            }
        });
        buttonLog.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonLn.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonLn.setText("ln");
        buttonLn.setToolTipText("Natual Logarithm");
        buttonLn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLnActionPerformed(evt);
            }
        });
        buttonLn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        button1x.setFont(new java.awt.Font("Tahoma", 0, 12));
        button1x.setText("1/x");
        button1x.setToolTipText("Reciprocal");
        button1x.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1xActionPerformed(evt);
            }
        });
        button1x.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonFact.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonFact.setText("!n");
        buttonFact.setToolTipText("Factorial");
        buttonFact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFactActionPerformed(evt);
            }
        });
        buttonFact.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonNot.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonNot.setText("Not");
        buttonNot.setToolTipText("NOT");
        buttonNot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNotActionPerformed(evt);
            }
        });
        buttonNot.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonMAdd.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonMAdd.setText("M+");
        buttonMAdd.setToolTipText("Memory Add");
        buttonMAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMAddActionPerformed(evt);
            }
        });
        buttonMAdd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonMR.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonMR.setText("MR");
        buttonMR.setToolTipText("Memory Rememberl");
        buttonMR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMRActionPerformed(evt);
            }
        });
        buttonMR.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonMSubtract.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonMSubtract.setText("M-");
        buttonMSubtract.setToolTipText("Memory Subtract");
        buttonMSubtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMSubtractActionPerformed(evt);
            }
        });
        buttonMSubtract.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonMC.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonMC.setText("MC");
        buttonMC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMCActionPerformed(evt);
            }
        });
        buttonMC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonPi.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonPi.setText("π");
        buttonPi.setToolTipText("PI");
        buttonPi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPiActionPerformed(evt);
            }
        });
        buttonPi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonTan.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonTan.setText("tan");
        buttonTan.setToolTipText("Tangent");
        buttonTan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTanActionPerformed(evt);
            }
        });
        buttonTan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonCos.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonCos.setText("cos");
        buttonCos.setToolTipText("Cosine");
        buttonCos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCosActionPerformed(evt);
            }
        });
        buttonCos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonSin.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonSin.setText("sin");
        buttonSin.setToolTipText("Sine");
        buttonSin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSinActionPerformed(evt);
            }
        });
        buttonSin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonGroup1.add(buttonBin);
        buttonBin.setText("Bin");
        buttonBin.setToolTipText("Binary");
        buttonBin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBinActionPerformed(evt);
            }
        });
        buttonBin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonGroup1.add(buttonDec);
        buttonDec.setSelected(true);
        buttonDec.setText("Dec");
        buttonDec.setToolTipText("Decimal Numbers");
        buttonDec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDecActionPerformed(evt);
            }
        });
        buttonDec.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonGroup1.add(buttonHex);
        buttonHex.setText("Hex");
        buttonHex.setToolTipText("Hexadecimal Numbers");
        buttonHex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonHexActionPerformed(evt);
            }
        });
        buttonHex.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        checkInv.setText("Inv");
        checkInv.setToolTipText("Invert Functions");
        checkInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkInvActionPerformed(evt);
            }
        });
        checkInv.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonPerm.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonPerm.setText("nPr");
        buttonPerm.setToolTipText("Permutation");
        buttonPerm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPermActionPerformed(evt);
            }
        });
        buttonPerm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonComb.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonComb.setText("nCr");
        buttonComb.setToolTipText("Combination (Chose)");
        buttonComb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCombActionPerformed(evt);
            }
        });
        buttonComb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonA.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonA.setText("A");
        buttonA.setToolTipText("A");
        buttonA.setEnabled(false);
        buttonA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAActionPerformed(evt);
            }
        });
        buttonA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonB.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonB.setText("B");
        buttonB.setToolTipText("B");
        buttonB.setEnabled(false);
        buttonB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBActionPerformed(evt);
            }
        });
        buttonB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonC.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        buttonC.setText("C");
        buttonC.setToolTipText("C");
        buttonC.setEnabled(false);
        buttonC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCActionPerformed(evt);
            }
        });
        buttonC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonD.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonD.setText("D");
        buttonD.setToolTipText("D");
        buttonD.setEnabled(false);
        buttonD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDActionPerformed(evt);
            }
        });
        buttonD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonE.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonE.setText("E");
        buttonE.setToolTipText("E");
        buttonE.setEnabled(false);
        buttonE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEActionPerformed(evt);
            }
        });
        buttonE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonF.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonF.setText("F");
        buttonF.setToolTipText("F");
        buttonF.setEnabled(false);
        buttonF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFActionPerformed(evt);
            }
        });
        buttonF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonAns.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonAns.setText("ANS");
        buttonAns.setToolTipText("Answer");
        buttonAns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAnsActionPerformed(evt);
            }
        });
        buttonAns.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonGroup1.add(buttonOct);
        buttonOct.setText("Oct");
        buttonOct.setToolTipText("Octal Numbers");
        buttonOct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOctActionPerformed(evt);
            }
        });
        buttonOct.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonExp10.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonExp10.setText("Exp");
        buttonExp10.setToolTipText("Scientific Notation");
        buttonExp10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExp10ActionPerformed(evt);
            }
        });
        buttonExp10.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonFrac.setFont(new java.awt.Font("Tahoma", 0, 12));
        buttonFrac.setText("Frac");
        buttonFrac.setToolTipText("Fraction Mode");
        buttonFrac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFracActionPerformed(evt);
            }
        });
        buttonFrac.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(buttonTan, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                                            .addComponent(buttonCos, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                                            .addComponent(buttonSin, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(buttonXor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(buttonAnd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(buttonMod))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(buttonLog, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                                            .addComponent(buttonFact, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                                            .addComponent(buttonLn, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(buttonCube, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(buttonSquare, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                                                .addComponent(buttonExp, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(buttonBin)
                                        .addGap(18, 18, 18)
                                        .addComponent(buttonDec)
                                        .addGap(18, 18, 18)
                                        .addComponent(buttonHex)
                                        .addGap(18, 18, 18)
                                        .addComponent(buttonOct)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(buttonMR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(buttonMC, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(buttonMAdd, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(button1, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(16, 16, 16)
                                                .addComponent(button7))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(button4, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(button8)
                                            .addComponent(button5, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                                            .addComponent(button2, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE))
                                        .addGap(8, 8, 8)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(button9)
                                            .addComponent(button3, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                                            .addComponent(button6, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(buttonLBracket, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(buttonRBracket, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(buttonAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(buttonSubtract, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(buttonMultiply, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(buttonDivide, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(checkInv)
                                        .addGap(40, 40, 40)
                                        .addComponent(buttonBackspace)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonAC, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonCE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonClear, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(buttonPerm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonPi, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(buttonComb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonOr))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonExp10, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                                    .addComponent(buttonNot, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(button1x)
                                    .addComponent(buttonFrac, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(buttonA, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonMSubtract, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(button0, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(buttonB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(9, 9, 9)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(buttonC, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonD, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonE, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonF, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(buttonSign, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonDecimal, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonAns)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(enter, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(2, 2, 2))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(inputField, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {button1, button1x, button2, button3, button4, button5, button6, button7, button8, button9, buttonAdd, buttonAnd, buttonComb, buttonCos, buttonCube, buttonE, buttonExp, buttonF, buttonFact, buttonLBracket, buttonLn, buttonLog, buttonMAdd, buttonMC, buttonMR, buttonMSubtract, buttonMod, buttonMultiply, buttonNot, buttonOr, buttonPerm, buttonPi, buttonSin, buttonSquare, buttonTan, buttonXor});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonBin)
                    .addComponent(buttonDec)
                    .addComponent(buttonHex)
                    .addComponent(buttonOct)
                    .addComponent(checkInv)
                    .addComponent(buttonClear)
                    .addComponent(buttonCE)
                    .addComponent(buttonAC)
                    .addComponent(buttonBackspace, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(button7)
                        .addGap(94, 94, 94))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonSquare, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonMod, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonLog, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                            .addComponent(buttonMC, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonSin, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonAnd, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonLn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonMR, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonCos, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(button4)
                            .addComponent(button5)
                            .addComponent(button6)
                            .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonCube, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonSubtract, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(buttonExp, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(buttonMAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(button1, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                                .addComponent(button2, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                                .addComponent(button3)
                                .addComponent(buttonMultiply, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(buttonDivide, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(buttonXor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(buttonFact, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(buttonTan, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(button9)
                            .addComponent(button8)
                            .addComponent(buttonLBracket, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                            .addComponent(buttonRBracket, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
                        .addGap(94, 94, 94)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                        .addComponent(buttonOr, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonPi, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(button0, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(enter, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(button1x, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonMSubtract, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonDecimal, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonAns, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                        .addComponent(buttonSign, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonNot, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonA, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonD, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                        .addComponent(buttonE, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                        .addComponent(buttonF, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                        .addComponent(buttonB, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                        .addComponent(buttonC, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonPerm, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonComb, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonExp10, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonFrac, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {button0, button1, button1x, button2, button3, button4, button5, button6, button7, button8, button9, buttonAdd, buttonAnd, buttonB, buttonComb, buttonCos, buttonCube, buttonDivide, buttonE, buttonExp, buttonF, buttonFact, buttonLBracket, buttonLn, buttonLog, buttonMAdd, buttonMC, buttonMR, buttonMSubtract, buttonMod, buttonMultiply, buttonNot, buttonOr, buttonPerm, buttonPi, buttonRBracket, buttonSin, buttonSquare, buttonSubtract, buttonTan, buttonXor});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * clear input of display
     * if key is pressed then clear the display
     *
     */
    private void clearInput(){

        //if screen needs to be cleared

        String s= inputField.getText();

        if(s.charAt(0)=='0'&&s.indexOf(' ')<0){
            inputField.setText("");
        }
        
        if(clear){

             //clear string and reset operators
            if(!(s.indexOf("+")>0||s.indexOf("-")>0||s.indexOf("/")>0||s.indexOf("*")>0||s.indexOf("%")>0||
                    s.indexOf("^")>0||s.indexOf("and")>0||s.indexOf("or")>0||s.indexOf("xor")>0||s.indexOf("not")>0)){
                inputField.setText("");
            clear=false;
            oper=false;
            }
           
            
        }

    }

    /*
     * Enter button
     * equals
     */

    private void enterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterActionPerformed

        //evaluate expression code here

       // String out=evaluate(inputField.getText());

        //inputField.setText(out);


        Evaluate.base=oldBase;
         //System.out.println(base+","+oldBase);

        //if there is error with input
       if(!errorCheck.checkError(inputField.getText()).equals("")){
           //reset operators set error string and set text
           inputField.setText(errorCheck.checkError(inputField.getText()));
           clear=true;
           oper=true;
           return;
       }
       System.out.println(errorCheck.formatExpression(inputField.getText()));

       //output answer
        String ans = Evaluate.eval( errorCheck.formatExpression(inputField.getText()));
        //store result
        
        System.out.println(ans);
        ans = Conversion.toBase(this.base, Conversion.toDec(oldBase,ans));
        result = Double.parseDouble(Conversion.toDec(base,ans));
        oldBase=base;
       
        //if fraction, format string as a fraction
        if(frac){
            Fraction f = new Fraction(result);
            if(f.denom==0)inputField.setText("0");
               else if(f.num / f.denom > 0 && f.num % f.denom != 0)inputField.setText(f.num / f.denom + "~" + f.num % f.denom + "~" + f.denom);
            else if(f.num%f.denom!=0)inputField.setText(f.num+"~"+f.denom);
            else inputField.setText(""+f.num/f.denom);

        }
        //if not fraction
        else{
            //if result has more than 20 digits
            //if(result>=1e20){
                //use scientific notation
            //    inputField.setText(sn.format(result));
            //}
            //else normal format
            //else {
                if(base==10) inputField.setText(df.format(result));
                else inputField.setText(ans);
           // }

        }
        //set operator and display to be cleared
        clear=false;
        oper=true;
        
    }//GEN-LAST:event_enterActionPerformed

    private void inputFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputFieldActionPerformed

    /*
     * 0 button
     * Numpad 0,keyboard 0,  button,
     */

    private void button0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button0ActionPerformed
        // TODO add your handling code here:

        //Button 0 pressed
        //clear input if needed
        //add 0 to string
        clearInput();
        inputField.setText(inputField.getText()+"0");
        oper=true;
    }//GEN-LAST:event_button0ActionPerformed

    /*
     * Decimal button
     * period
     */
    private void buttonDecimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDecimalActionPerformed

          //Button . pressed
        //if frac add ~
        //else add .
        clear=false;
         if(!frac)inputField.setText(inputField.getText()+".");
         else inputField.setText(inputField.getText()+"~");

    }//GEN-LAST:event_buttonDecimalActionPerformed


    /*
     * Divide
     * Button, Numpad divide, slash
     */
    private void buttonDivideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDivideActionPerformed

        //Button / pressed
        //if operator
        //add / to string
        if(oper){
        inputField.setText(inputField.getText()+" / ");
        oper = false;
        }
    }//GEN-LAST:event_buttonDivideActionPerformed

    private void buttonMultiplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMultiplyActionPerformed
        //Button * pressed
        //if operator
        //add * to string
        if(oper){
        inputField.setText(inputField.getText()+" * ");
        oper = false;
        }
    }//GEN-LAST:event_buttonMultiplyActionPerformed
/*
     * Add
     * Button, Numpad plus
     */
    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        //Button + pressed
        //if operator
        //add + to string
        if(oper){
        inputField.setText(inputField.getText()+" + ");
        oper = false;
        }
    }//GEN-LAST:event_buttonAddActionPerformed
/*
     * Subtract
     * Button, Numpad minus, dash
     */
    private void buttonSubtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSubtractActionPerformed
       //Button - pressed
        //if operator
        //add - to string
        if(oper){
        inputField.setText(inputField.getText()+" - ");
        oper = false;
        }
    }//GEN-LAST:event_buttonSubtractActionPerformed
/*
     * Modula
       % button
     */
    private void buttonModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonModActionPerformed
        //Button Mod pressed
        //if operator
        //add MOD to string
        if(oper){
        inputField.setText(inputField.getText()+" % ");
        oper = false;
        }
    }//GEN-LAST:event_buttonModActionPerformed
/*
     * And
     * And binary operator
     */
    private void buttonAndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAndActionPerformed
        //Button And pressed
        //clear input if needed
        //add and to string
        if(oper){
        inputField.setText(inputField.getText()+" and ");
        oper = false;
        }
    }//GEN-LAST:event_buttonAndActionPerformed
/*
     * Or
     * Or binary operator
     */
    private void buttonOrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOrActionPerformed
        //Button 0r pressed
        //if operator
        //add OR to string
        if(oper){
        inputField.setText(inputField.getText()+" or ");
        oper = false;
        }
    }//GEN-LAST:event_buttonOrActionPerformed

    /*
     * Xor
     * Xor binary operator
     */
    private void buttonXorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonXorActionPerformed
        //Button XOR pressed
        //if operator
        //add XOR to string
        if(oper){
        inputField.setText(inputField.getText()+" xor ");
        oper = false;
        }
    }//GEN-LAST:event_buttonXorActionPerformed
    /*
     * (
     * left bracket
     */
    private void buttonLBracketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLBracketActionPerformed
         //Button ( pressed
        //add ( to string
        clearInput();
        inputField.setText(inputField.getText()+" ( ");
    }//GEN-LAST:event_buttonLBracketActionPerformed
    /*
     *  )
     *  right bracket
     */
    private void buttonRBracketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRBracketActionPerformed
       //Button ) pressed
        //add ) to string
        inputField.setText(inputField.getText()+" ) ");
    }//GEN-LAST:event_buttonRBracketActionPerformed
    /*
     *Clear entry button
     *
     */
    private void buttonCEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCEActionPerformed
        //clear entry
        inputField.setText("0");
        oper=true;
        clear=true;
    }//GEN-LAST:event_buttonCEActionPerformed
       /*
     * Clear button
     */
    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
       //clear display and set to be cleared
        //same as above (just for show)
        inputField.setText("0");
        oper=true;
        clear=true;
    }//GEN-LAST:event_buttonClearActionPerformed
    /*
     * All Clear button
     * AC
     */
    private void buttonACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonACActionPerformed
       //Button all clear
        //clear input if needed
        //add 0 to string
        oper=true;
        inputField.setText("0");
        result=0;
        memory=0;
        clear=true;
    }//GEN-LAST:event_buttonACActionPerformed
     /*
     * Backspace button
     * remvoe last char/func
     */
    private void buttonBackspaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBackspaceActionPerformed
        //Button backspace pressed

        //index of string to backspace
        int cut=0;
        String input = inputField.getText();
       //if string is bigger than 0
         if(input.length()>0&&!clear){
              //find the last space
            if (input.charAt(input.length() - 1) == ' ') {
                cut = input.substring(0, input.lastIndexOf(' ')).lastIndexOf(' ');
            }
            //if no last space truncate last digit
            else cut=input.length()-1;
            //set display
            inputField.setText(input.substring(0,cut));
            //if operator is truncatuated set operator flag to false
            if(input.charAt(input.length()-1)==' '){
                oper=false;
             }
                //else operator is true
            else oper=true;
        }
        if(inputField.getText().length()==0){
            
            inputField.setText("0");
            clear=true;

        }

        
    }//GEN-LAST:event_buttonBackspaceActionPerformed
 /*
     * Square/Square root button
     *
     */
    private void buttonSquareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSquareActionPerformed
        //if operator needed and not inverted
         if(oper){
             //add square
            if(!inv)inputField.setText(inputField.getText() + " ^ 2 ");
        }
         //if operater not needed and inverted
         if(inv){
             clearInput();
             //square root
             inputField.setText(inputField.getText()+" 2√");
         }
    }//GEN-LAST:event_buttonSquareActionPerformed
     /*
     * Cube /Cube root button
     *
     */
    private void buttonCubeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCubeActionPerformed
        //if operator needed and not inverted
         if(oper){
             //add cube
            if(!inv)inputField.setText(inputField.getText() + " ^ 3 ");
        }
         //if not operator and inverted

         if(inv){
             clearInput();
             inputField.setText(inputField.getText()+" 3√");
         }
    }//GEN-LAST:event_buttonCubeActionPerformed

     /*
     * Scientific Notation button
     * Disabled - not working (deciaml formatting)
     */
    private void buttonExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExpActionPerformed
        //if operator needed and not inverted

         if(oper){
             //add power
            if(!inv)inputField.setText(inputField.getText()+" ^ ");
            oper=false;
        }
         //if operator and inverted
         if(oper){
             clearInput();
             //add root
             if(inv)inputField.setText(inputField.getText()+"√");
         }
    }//GEN-LAST:event_buttonExpActionPerformed
    /*
     * Logarithm button
     * log function
     */
    private void buttonLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLogActionPerformed
        //if not operator add log
        clearInput();
         if(!oper){
        inputField.setText(inputField.getText()+" log ");
        }
    }//GEN-LAST:event_buttonLogActionPerformed
     /*
     * natural Logarithm button
     * ln function
     */
    private void buttonLnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLnActionPerformed
        //if not operator add ln
        clearInput();
         if(!oper){
        inputField.setText(inputField.getText()+" ln ");
        }
    }//GEN-LAST:event_buttonLnActionPerformed
     /*
     * reciprocal button
     * 1 /x button
     */
    private void button1xActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1xActionPerformed
       //if not operator add reciprical
        clearInput();
        if(!oper){
        inputField.setText(inputField.getText()+" 1 / ");
        }
    }//GEN-LAST:event_button1xActionPerformed
     /*
     * Factorial button
     *
     */
    private void buttonFactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFactActionPerformed
        //if not operator add factorial
        clearInput();
         if(!oper){
        inputField.setText(inputField.getText()+"!");
        }
    }//GEN-LAST:event_buttonFactActionPerformed
     /*
     * Not button
     * Disabled - Not working
     */
    private void buttonNotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNotActionPerformed
       //if operater needed add NOT
       //  if(oper){
       // inputField.setText(inputField.getText()+" not ");
       // oper=false;
       // }
    }//GEN-LAST:event_buttonNotActionPerformed
     /*
     * Memory add button
     * Add result to memory
     */
    private void buttonMAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMAddActionPerformed
       //add result to memory
        memory += result;
    }//GEN-LAST:event_buttonMAddActionPerformed
     /*
     * Memory remember button
     * Puts memeory value into input
     */
    private void buttonMRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMRActionPerformed
       //if not oeprator use the stored memory
        //if(!oper){
            clearInput();
        inputField.setText(inputField.getText()+df.format(memory));
        oper=true;
        //}

    }//GEN-LAST:event_buttonMRActionPerformed
     /*
     * Memory subtract button
     * Subtract memory
     */
    private void buttonMSubtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMSubtractActionPerformed

        //if not operator subtract result from memory
        memory -= result;
    }//GEN-LAST:event_buttonMSubtractActionPerformed
     /*
     * Memoru Clear button
     * clear memory
     */
    private void buttonMCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMCActionPerformed
        //clear memory
        memory=0;
    }//GEN-LAST:event_buttonMCActionPerformed
     /*
     * Pi button
     * Math.pi
     */
    private void buttonPiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPiActionPerformed
        //if need clear screen
         clearInput();
         //if not oeprator add Pi
        if(!oper){
        inputField.setText(inputField.getText()+" π ");
        }
    }//GEN-LAST:event_buttonPiActionPerformed
     /*
     * Tan/atan button
     * Tangent/Arctangent
     */
    private void buttonTanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTanActionPerformed
        //if need clear screen
         clearInput();
         //if not operator and inverted add atan
      if(!oper){
       if(inv)inputField.setText(inputField.getText()+" atan ");
       //else add tan
        else inputField.setText(inputField.getText() + " tan ");
       }
    }//GEN-LAST:event_buttonTanActionPerformed
    /*
     * Cos/acos button
     * Cosine/Arcosine
     */
    private void buttonCosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCosActionPerformed
        //if need clear screen
         clearInput();

         //if not operator
         if(!oper){
             //if inverted add acos
       if(inv) inputField.setText(inputField.getText()+" acos ");
       //else add cos
        else inputField.setText(inputField.getText() + " cos ");
        }
    }//GEN-LAST:event_buttonCosActionPerformed
    /*
     * Sin/asin button
     * Sine/arcsine
     */
    private void buttonSinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSinActionPerformed
        //if needed clear screen
         clearInput();
         //if not operator
         if(!oper){
             //if inverted add asin
        if(inv)inputField.setText(inputField.getText()+" asin ");
        //else add sin
        else inputField.setText(inputField.getText() + " sin ");
        }
    }//GEN-LAST:event_buttonSinActionPerformed
    /*
     * 1 button
     */
    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
           //if needed clear display
        //add 1 and set oper to true
         clearInput();
        inputField.setText(inputField.getText()+"1");
        oper=true;

    }//GEN-LAST:event_button1ActionPerformed
    /*
     * 2 button
     */
    private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed
            //if needed clear display
        //add 2 and set oper to true
 clearInput();
        inputField.setText(inputField.getText()+"2");
        oper=true;
    }//GEN-LAST:event_button2ActionPerformed
    /*
     * 3 button
     */
    private void button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button3ActionPerformed
         //if needed clear display
        //add 3 and set oper to true
         clearInput();
        inputField.setText(inputField.getText()+"3");
        oper=true;
    }//GEN-LAST:event_button3ActionPerformed
    /*
     * 4 button
     */
    private void button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button4ActionPerformed
        //if needed clear display
        //add 4 and set oper to true
        clearInput();
        inputField.setText(inputField.getText()+"4");
        oper=true;
    }//GEN-LAST:event_button4ActionPerformed
    /*
     * 5 button
     */
    private void button5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button5ActionPerformed
        //if needed clear display
        //add 5 and set oper to true
        clearInput();
        inputField.setText(inputField.getText()+"5");
        oper=true;
    }//GEN-LAST:event_button5ActionPerformed
    /*
     * 6 button
     */
    private void button6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button6ActionPerformed
         //if needed clear display
        //add 6 and set oper to true
        clearInput();
        inputField.setText(inputField.getText()+"6");
        oper=true;
    }//GEN-LAST:event_button6ActionPerformed
    /*
     * 7 button
     */
    private void button7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button7ActionPerformed
         //if needed clear display
        //add7 and set oper to true
        clearInput();
       inputField.setText(inputField.getText()+"7");
       oper=true;
    }//GEN-LAST:event_button7ActionPerformed
    /*
     * 8 button
     */
    private void button8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button8ActionPerformed
         //if needed clear display
        //add 8 and set oper to true
         clearInput();
        inputField.setText(inputField.getText()+"8");
        oper=true;
    }//GEN-LAST:event_button8ActionPerformed
    /*
     * 9 button
     */
    private void button9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button9ActionPerformed
          //if needed clear display
        //add 9 and set oper to true
        clearInput();
        inputField.setText(inputField.getText()+"9");
        oper=true;
    }//GEN-LAST:event_button9ActionPerformed
    /*
     * Get keyboard input
     * A-F, operators, 1-9, Numpad
     */
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        //set event t to null
        java.awt.event.ActionEvent t=new java.awt.event.ActionEvent(evt, WIDTH, null);
        //if shift is not down
        if(!evt.isShiftDown()){
            //if key is 0 to 9 add digit
            if(evt.getKeyCode()>=KeyEvent.VK_0&&evt.getKeyCode()<=KeyEvent.VK_9&&evt.getKeyCode()-KeyEvent.VK_0<base){
                  //if needed clear display
                 clearInput();
                inputField.setText(inputField.getText()+(char)('0'+evt.getKeyCode()-KeyEvent.VK_0));
                //operatoer to true
                oper=true;
            }
            //if key is 0 to 9 on Numpad add digit
            if(evt.getKeyCode()>=KeyEvent.VK_NUMPAD0&&evt.getKeyCode()<=KeyEvent.VK_NUMPAD9&&evt.getKeyCode()-KeyEvent.VK_NUMPAD0<base){
                    //if neede clear input
                 clearInput();
                inputField.setText(inputField.getText()+(char)('0'+evt.getKeyCode()-KeyEvent.VK_NUMPAD0));
                   //operator to true
                oper=true;
            }
        }
        // power
        if(evt.isShiftDown()&&!oper&&evt.getKeyCode()==KeyEvent.VK_6){
            inputField.setText(inputField.getText()+"^");
            oper=false;
        }

        //brackets
        if(evt.isShiftDown()&&evt.getKeyCode()==KeyEvent.VK_9){
            clearInput();
            inputField.setText(inputField.getText()+"(");
            oper=false;
        }
        if(evt.isShiftDown()&&evt.getKeyCode()==KeyEvent.VK_0){
            clearInput();
            inputField.setText(inputField.getText()+")");
            oper=false;
        }

        //if key is A to F and base is in 16 add letter
        if(evt.getKeyCode()>=KeyEvent.VK_A&&evt.getKeyCode()<=KeyEvent.VK_F&&base==16){
            clearInput();
            inputField.setText(inputField.getText()+(char)('A'+(evt.getKeyCode()-KeyEvent.VK_A)));
            //operator to true
            oper=true;
            //if needed clear input
             
        }
        //if key is + add +
       if((evt.getKeyCode() == KeyEvent.VK_ADD||evt.getKeyCode() == KeyEvent.VK_PLUS)&&oper){
           inputField.setText(inputField.getText()+" + ");
           oper = false;
       }
        //+ above = sign
        if((evt.isShiftDown()&&evt.getKeyCode()==KeyEvent.VK_EQUALS)&&oper){
            inputField.setText(inputField.getText()+" + ");
           oper = false;
        }
        //if key is - add -
       if((evt.getKeyCode() == KeyEvent.VK_SUBTRACT||evt.getKeyCode() == KeyEvent.VK_MINUS)&&oper){
           inputField.setText(inputField.getText()+" - ");
           oper=false;
       }
        //if key is * add *
       if((evt.getKeyCode() == KeyEvent.VK_MULTIPLY||(evt.isShiftDown())&&evt.getKeyCode() == KeyEvent.VK_8)&&oper){
           inputField.setText(inputField.getText()+" * ");
           oper = false;
       }
        //if key is / add /
       if((evt.getKeyCode() == KeyEvent.VK_DIVIDE||evt.getKeyCode() == KeyEvent.VK_SLASH)&&oper){
           inputField.setText(inputField.getText()+" / ");
           oper=true;
       }
        //pass to decimal
       if(evt.getKeyCode() == KeyEvent.VK_DECIMAL||evt.getKeyCode() == KeyEvent.VK_PERIOD)buttonDecimalActionPerformed(t);
        //pass to backspace func
        if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) buttonBackspaceActionPerformed(t);
        //pass to enter func
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)enterActionPerformed(t);
    }//GEN-LAST:event_formKeyPressed
    /*
     * Inverse button
     */
    private void checkInvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkInvActionPerformed
        //invese
        inv=!inv;
        //Set tooltips to standard fucntions
        if(!inv){
            buttonTan.setToolTipText("Tangent");
            buttonSin.setToolTipText("Sine");
            buttonCos.setToolTipText("Cosine");
            buttonSquare.setToolTipText("Square");
            buttonCube.setToolTipText("Cube");
            buttonExp.setToolTipText("Exponent");
        }
        //Set tooltips to inverse fucntions
         else {
            buttonTan.setToolTipText("Arctangent");
            buttonSin.setToolTipText("Arcsine");
            buttonCos.setToolTipText("Arccosine");
            buttonSquare.setToolTipText("Square Root");
            buttonCube.setToolTipText("Cube Root");
            buttonExp.setToolTipText("Root");
         }
    }//GEN-LAST:event_checkInvActionPerformed
   /*
     * Permutation button
    * nPr
    */
    private void buttonPermActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPermActionPerformed
        //if oper add permutation func
        if(oper){
            inputField.setText(inputField.getText()+" npr ");
            oper=false;
        }
    }//GEN-LAST:event_buttonPermActionPerformed
    /*
     * Combination button (chose)
    * nCr
    */
    private void buttonCombActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCombActionPerformed
        //if oper add combination func
         if(oper){
            inputField.setText(inputField.getText()+" ncr ");
            oper = false;
        }
    }//GEN-LAST:event_buttonCombActionPerformed
    /*
     * A button
    *
    */
    private void buttonAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAActionPerformed
        //clear input if needed
        //add A to text
        //set operator true
        //clearInput();
        inputField.setText(inputField.getText()+"A");
        oper = true;
    }//GEN-LAST:event_buttonAActionPerformed
     /*
     * B button
    *
    */
    private void buttonBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBActionPerformed
        //clear input if needed
        //addB to text
        //set operator true
        clearInput();
        inputField.setText(inputField.getText()+"B");
        oper = true;
    }//GEN-LAST:event_buttonBActionPerformed
     /*
     * C button
    *
    */
    private void buttonCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCActionPerformed
        //clear input if needed
        //add C to text
        //set operator true
        clearInput();
        inputField.setText(inputField.getText()+"C");
        oper = true;
    }//GEN-LAST:event_buttonCActionPerformed
     /*
     * D button
    *
    */
    private void buttonDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDActionPerformed
        //clear input if needed
        //add D to text
        //set operator true
        clearInput();
        inputField.setText(inputField.getText()+"D");
        oper = true;
    }//GEN-LAST:event_buttonDActionPerformed
     /*
     * E button
    *
    */
    private void buttonEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEActionPerformed
        //clear input if needed
        //add E to text
        //set operator true
        clearInput();

        inputField.setText(inputField.getText()+"E");
        oper = true;
    }//GEN-LAST:event_buttonEActionPerformed
     /*
     * F button
    *
    */
    private void buttonFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFActionPerformed
        //clear input if needed
        //add F to text
        //set operator true
        clearInput();

        inputField.setText(inputField.getText()+"F");
        oper = true;
    }//GEN-LAST:event_buttonFActionPerformed
     /*
     * Binary Conversion
    *
    */
    private void buttonBinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBinActionPerformed
       //set base to 2


        oldBase=base;



        base = 2;
        enterActionPerformed(evt);
        //enable only binary numbers
        button0.setEnabled(true);
        button1.setEnabled(true);
        button2.setEnabled(false);
        button3.setEnabled(false);
        button4.setEnabled(false);
        button5.setEnabled(false);
        button6.setEnabled(false);
        button7.setEnabled(false);
        button8.setEnabled(false);
        button9.setEnabled(false);
        buttonA.setEnabled(false);
        buttonB.setEnabled(false);
        buttonC.setEnabled(false);
        buttonD.setEnabled(false);
        buttonE.setEnabled(false);
        buttonF.setEnabled(false);
    }//GEN-LAST:event_buttonBinActionPerformed
    /*
     * Deciaml Conversion
    *
    */
    private void buttonDecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDecActionPerformed

        oldBase=base;
        //set base to 10
        base = 10;
        enterActionPerformed(evt);
        //enable only decimal numbers
         button0.setEnabled(true);
        button1.setEnabled(true);
        button2.setEnabled(true);
        button3.setEnabled(true);
        button4.setEnabled(true);
        button5.setEnabled(true);
        button6.setEnabled(true);
        button7.setEnabled(true);
        button8.setEnabled(true);
        button9.setEnabled(true);
        buttonA.setEnabled(false);
        buttonB.setEnabled(false);
        buttonC.setEnabled(false);
        buttonD.setEnabled(false);
        buttonE.setEnabled(false);
        buttonF.setEnabled(false);
    }//GEN-LAST:event_buttonDecActionPerformed
    /*
     * Hexadecimal Conversion
    *
    */
    private void buttonHexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonHexActionPerformed
        // TODO add your handling code here:
        oldBase=base;
        base = 16;
        enterActionPerformed(evt);
         button0.setEnabled(true);
        button1.setEnabled(true);
        button2.setEnabled(true);
        button3.setEnabled(true);
        button4.setEnabled(true);
        button5.setEnabled(true);
        button6.setEnabled(true);
        button7.setEnabled(true);
        button8.setEnabled(true);
        button9.setEnabled(true);
        buttonA.setEnabled(true);
        buttonB.setEnabled(true);
        buttonC.setEnabled(true);
        buttonD.setEnabled(true);
        buttonE.setEnabled(true);
        buttonF.setEnabled(true);
    }//GEN-LAST:event_buttonHexActionPerformed
    /*
     * Answers
    *  Put answers do display
    */
    private void buttonAnsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAnsActionPerformed
        clearInput();
        //if(!oper){
        inputField.setText(inputField.getText()+df.format(result));
        oper=true;
        //}
    }//GEN-LAST:event_buttonAnsActionPerformed
    /*
     * Octal Conversion
    *
    */
    private void buttonOctActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOctActionPerformed

         oldBase=base;
        base=8;
        enterActionPerformed(evt);
         button0.setEnabled(true);
        button1.setEnabled(true);
        button2.setEnabled(true);
        button3.setEnabled(true);
        button4.setEnabled(true);
        button5.setEnabled(true);
        button6.setEnabled(true);
        button7.setEnabled(true);
        button8.setEnabled(false);
        button9.setEnabled(false);
        buttonA.setEnabled(false);
        buttonB.setEnabled(false);
        buttonC.setEnabled(false);
        buttonD.setEnabled(false);
        buttonE.setEnabled(false);
        buttonF.setEnabled(false);
    }//GEN-LAST:event_buttonOctActionPerformed
    /*
     * Scientific Notation
    *  Disabled - Formatting decimals
    */
    private void buttonExp10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExp10ActionPerformed
        // TODO add your handling code here:
       // if(oper){
        //inputField.setText(inputField.getText()+"E");
        //oper=false;
        //}

        

    }//GEN-LAST:event_buttonExp10ActionPerformed
    /*
     * Frac format
    *  Semi working, precision errors
    */
    boolean fracBar=false;
    private void buttonFracActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFracActionPerformed
        // TODO add your handling code here:
        frac=!frac;
        if(frac){
            if(!fracBar) {
                buttonDecimal.setText("~");
            }
            else buttonDecimal.setText("~");
        }
        else {
            buttonDecimal.setText(".");
        }

    }//GEN-LAST:event_buttonFracActionPerformed
    /*
     * Sign Button
    *  Negative / Postive
    */
    private void buttonSignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSignActionPerformed
        // TODO add your handling code here:
        clearInput();
        if(!oper){
            inputField.setText(inputField.getText()+"-");
        }
    }//GEN-LAST:event_buttonSignActionPerformed

    /**
     *
     * @param args
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Display().setVisible(true);
            }
        });
    }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button0;
    private javax.swing.JButton button1;
    private javax.swing.JButton button1x;
    private javax.swing.JButton button2;
    private javax.swing.JButton button3;
    private javax.swing.JButton button4;
    private javax.swing.JButton button5;
    private javax.swing.JButton button6;
    private javax.swing.JButton button7;
    private javax.swing.JButton button8;
    private javax.swing.JButton button9;
    private javax.swing.JButton buttonA;
    private javax.swing.JButton buttonAC;
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonAnd;
    private javax.swing.JButton buttonAns;
    private javax.swing.JButton buttonB;
    private javax.swing.JButton buttonBackspace;
    private javax.swing.JRadioButton buttonBin;
    private javax.swing.JButton buttonC;
    private javax.swing.JButton buttonCE;
    private javax.swing.JButton buttonClear;
    private javax.swing.JButton buttonComb;
    private javax.swing.JButton buttonCos;
    private javax.swing.JButton buttonCube;
    private javax.swing.JButton buttonD;
    private javax.swing.JRadioButton buttonDec;
    private javax.swing.JButton buttonDecimal;
    private javax.swing.JButton buttonDivide;
    private javax.swing.JButton buttonE;
    private javax.swing.JButton buttonExp;
    private javax.swing.JButton buttonExp10;
    private javax.swing.JButton buttonF;
    private javax.swing.JButton buttonFact;
    private javax.swing.JButton buttonFrac;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton buttonHex;
    private javax.swing.JButton buttonLBracket;
    private javax.swing.JButton buttonLn;
    private javax.swing.JButton buttonLog;
    private javax.swing.JButton buttonMAdd;
    private javax.swing.JButton buttonMC;
    private javax.swing.JButton buttonMR;
    private javax.swing.JButton buttonMSubtract;
    private javax.swing.JButton buttonMod;
    private javax.swing.JButton buttonMultiply;
    private javax.swing.JButton buttonNot;
    private javax.swing.JRadioButton buttonOct;
    private javax.swing.JButton buttonOr;
    private javax.swing.JButton buttonPerm;
    private javax.swing.JButton buttonPi;
    private javax.swing.JButton buttonRBracket;
    private javax.swing.JButton buttonSign;
    private javax.swing.JButton buttonSin;
    private javax.swing.JButton buttonSquare;
    private javax.swing.JButton buttonSubtract;
    private javax.swing.JButton buttonTan;
    private javax.swing.JButton buttonXor;
    private javax.swing.JCheckBox checkInv;
    private javax.swing.JButton enter;
    private javax.swing.JTextField inputField;
    // End of variables declaration//GEN-END:variables

}